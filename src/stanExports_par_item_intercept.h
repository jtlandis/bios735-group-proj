// Generated by rstantools.  Do not edit by hand.

/*
    bios735-group-proj is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bios735-group-proj is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bios735-group-proj.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_par_item_intercept_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 49> locations_array__ =
  {" (found before start of program)",
  " (in 'par_item_intercept', line 20, column 2 to column 11)",
  " (in 'par_item_intercept', line 21, column 2 to column 18)",
  " (in 'par_item_intercept', line 22, column 2 to column 24)",
  " (in 'par_item_intercept', line 23, column 2 to column 29)",
  " (in 'par_item_intercept', line 28, column 2 to column 36)",
  " (in 'par_item_intercept', line 52, column 2 to column 28)",
  " (in 'par_item_intercept', line 54, column 4 to column 21)",
  " (in 'par_item_intercept', line 56, column 6 to column 36)",
  " (in 'par_item_intercept', line 55, column 19 to line 57, column 5)",
  " (in 'par_item_intercept', line 55, column 4 to line 57, column 5)",
  " (in 'par_item_intercept', line 58, column 4 to column 56)",
  " (in 'par_item_intercept', line 59, column 4 to column 52)",
  " (in 'par_item_intercept', line 60, column 4 to column 46)",
  " (in 'par_item_intercept', line 53, column 27 to line 61, column 3)",
  " (in 'par_item_intercept', line 53, column 2 to line 61, column 3)",
  " (in 'par_item_intercept', line 34, column 2 to column 21)",
  " (in 'par_item_intercept', line 35, column 2 to column 46)",
  " (in 'par_item_intercept', line 36, column 2 to column 27)",
  " (in 'par_item_intercept', line 37, column 2 to column 32)",
  " (in 'par_item_intercept', line 40, column 4 to column 21)",
  " (in 'par_item_intercept', line 42, column 6 to column 36)",
  " (in 'par_item_intercept', line 41, column 19 to line 43, column 5)",
  " (in 'par_item_intercept', line 41, column 4 to line 43, column 5)",
  " (in 'par_item_intercept', line 44, column 4 to column 56)",
  " (in 'par_item_intercept', line 45, column 4 to column 52)",
  " (in 'par_item_intercept', line 46, column 4 to column 24)",
  " (in 'par_item_intercept', line 39, column 27 to line 47, column 3)",
  " (in 'par_item_intercept', line 39, column 2 to line 47, column 3)",
  " (in 'par_item_intercept', line 5, column 2 to column 21)",
  " (in 'par_item_intercept', line 6, column 2 to column 17)",
  " (in 'par_item_intercept', line 7, column 2 to column 17)",
  " (in 'par_item_intercept', line 8, column 8 to column 13)",
  " (in 'par_item_intercept', line 8, column 2 to column 30)",
  " (in 'par_item_intercept', line 9, column 9 to column 14)",
  " (in 'par_item_intercept', line 9, column 16 to column 17)",
  " (in 'par_item_intercept', line 9, column 2 to column 21)",
  " (in 'par_item_intercept', line 11, column 9 to column 10)",
  " (in 'par_item_intercept', line 11, column 2 to column 21)",
  " (in 'par_item_intercept', line 12, column 13 to column 14)",
  " (in 'par_item_intercept', line 12, column 2 to column 28)",
  " (in 'par_item_intercept', line 13, column 9 to column 10)",
  " (in 'par_item_intercept', line 13, column 2 to column 18)",
  " (in 'par_item_intercept', line 14, column 2 to column 22)",
  " (in 'par_item_intercept', line 15, column 2 to column 22)",
  " (in 'par_item_intercept', line 21, column 9 to column 10)",
  " (in 'par_item_intercept', line 22, column 10 to column 11)",
  " (in 'par_item_intercept', line 28, column 9 to column 10)",
  " (in 'par_item_intercept', line 52, column 9 to column 18)"};
#include <stan_meta_header.hpp>
class model_par_item_intercept final : public model_base_crtp<model_par_item_intercept> {
private:
  int T_obs;
  int q;
  int p;
  std::vector<int> y;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,1> mu_gamma_data__;
  Eigen::Matrix<double,-1,-1> Sigma_gamma_data__;
  Eigen::Matrix<double,-1,1> alpha_data__;
  double a_tau;
  double b_tau;
  int log_lik_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mu_gamma{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Sigma_gamma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha{nullptr, 0};
public:
  ~model_par_item_intercept() {}
  model_par_item_intercept(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_par_item_intercept_namespace::model_par_item_intercept";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization", "T_obs", "int",
        std::vector<size_t>{});
      T_obs = std::numeric_limits<int>::min();
      current_statement__ = 29;
      T_obs = context__.vals_i("T_obs")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "T_obs", T_obs, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "q", "int",
        std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      current_statement__ = 30;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "q", q, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 31;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("y", "T_obs", T_obs);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(T_obs)});
      y = std::vector<int>(T_obs, std::numeric_limits<int>::min());
      current_statement__ = 33;
      y = context__.vals_i("y");
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("X", "T_obs", T_obs);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("X", "p", p);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(T_obs),
          static_cast<size_t>(p)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(T_obs, p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(),
        T_obs, p);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 36;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= T_obs; ++sym2__) {
            current_statement__ = 36;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 36;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("mu_gamma", "p", p);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "mu_gamma", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      mu_gamma_data__ = Eigen::Matrix<double,-1,1>::Constant(p,
                          std::numeric_limits<double>::quiet_NaN());
      new (&mu_gamma)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mu_gamma_data__.data(), p);
      {
        std::vector<local_scalar_t__> mu_gamma_flat__;
        current_statement__ = 38;
        mu_gamma_flat__ = context__.vals_r("mu_gamma");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(mu_gamma, mu_gamma_flat__[(pos__ - 1)],
            "assigning variable mu_gamma", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("Sigma_gamma", "p", p);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("Sigma_gamma", "p", p);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "Sigma_gamma", "double",
        std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(p)});
      Sigma_gamma_data__ = Eigen::Matrix<double,-1,-1>::Constant(p, p,
                             std::numeric_limits<double>::quiet_NaN());
      new (&Sigma_gamma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Sigma_gamma_data__.data(), p,
        p);
      {
        std::vector<local_scalar_t__> Sigma_gamma_flat__;
        current_statement__ = 40;
        Sigma_gamma_flat__ = context__.vals_r("Sigma_gamma");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 40;
            stan::model::assign(Sigma_gamma, Sigma_gamma_flat__[(pos__ - 1)],
              "assigning variable Sigma_gamma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 40;
      stan::math::check_cov_matrix(function__, "Sigma_gamma", Sigma_gamma);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("alpha", "q", q);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(q)});
      alpha_data__ = Eigen::Matrix<double,-1,1>::Constant(q,
                       std::numeric_limits<double>::quiet_NaN());
      new (&alpha)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_data__.data(), q);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 42;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      context__.validate_dims("data initialization", "a_tau", "double",
        std::vector<size_t>{});
      a_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 43;
      a_tau = context__.vals_r("a_tau")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "a_tau", a_tau, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "b_tau", "double",
        std::vector<size_t>{});
      b_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      b_tau = context__.vals_r("b_tau")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "b_tau", b_tau, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("gamma", "p", p);
      current_statement__ = 46;
      stan::math::validate_positive_index("beta_tilde", "q", q);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("beta", "q", q);
      current_statement__ = 48;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 48;
      log_lik_1dim__ = (T_obs - q);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("log_lik", "T_obs - q",
        log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + p + (q - 1) + 1;
  }
  inline std::string model_name() const final {
    return "model_par_item_intercept";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_par_item_intercept_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 1;
      eta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 2;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 3;
      beta_tilde = in__.template read_constrain_simplex<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                     q);
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 4;
      tau = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(beta, stan::math::multiply(tau, beta_tilde),
        "assigning variable beta");
      {
        current_statement__ = 16;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eta, 0, 1));
        current_statement__ = 17;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(gamma,
                         mu_gamma, Sigma_gamma));
        current_statement__ = 18;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(tau, a_tau, b_tau));
        current_statement__ = 19;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(beta_tilde, alpha));
        current_statement__ = 28;
        for (int t = (q + 1); t <= T_obs; ++t) {
          local_scalar_t__ ar_part = DUMMY_VAR__;
          current_statement__ = 20;
          ar_part = 0;
          current_statement__ = 23;
          for (int l = 1; l <= q; ++l) {
            current_statement__ = 21;
            ar_part = (ar_part +
              (stan::model::rvalue(beta, "beta", stan::model::index_uni(l)) *
              stan::model::rvalue(y, "y", stan::model::index_uni((t - l)))));
          }
          local_scalar_t__ cov_part = DUMMY_VAR__;
          current_statement__ = 24;
          cov_part = stan::math::exp((eta +
                       stan::math::dot_product(
                         stan::model::rvalue(X, "X",
                           stan::model::index_uni(t)), gamma)));
          local_scalar_t__ m_t = DUMMY_VAR__;
          current_statement__ = 25;
          m_t = (ar_part + ((1 - stan::math::sum(beta)) * cov_part));
          current_statement__ = 26;
          lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(t)), m_t));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_par_item_intercept_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      eta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      Eigen::Matrix<double,-1,1> beta_tilde =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta_tilde = in__.template read_constrain_simplex<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                     q);
      double tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      tau = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(eta);
      out__.write(gamma);
      out__.write(beta_tilde);
      out__.write(tau);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      stan::model::assign(beta, stan::math::multiply(tau, beta_tilde),
        "assigning variable beta");
      if (emit_transformed_parameters__) {
        out__.write(beta);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      for (int t = (q + 1); t <= T_obs; ++t) {
        double ar_part = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 7;
        ar_part = 0;
        current_statement__ = 10;
        for (int l = 1; l <= q; ++l) {
          current_statement__ = 8;
          ar_part = (ar_part +
            (stan::model::rvalue(beta, "beta", stan::model::index_uni(l)) *
            stan::model::rvalue(y, "y", stan::model::index_uni((t - l)))));
        }
        double cov_part = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 11;
        cov_part = stan::math::exp((eta +
                     stan::math::dot_product(
                       stan::model::rvalue(X, "X", stan::model::index_uni(t)),
                       gamma)));
        double m_t = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 12;
        m_t = (ar_part + ((1 - stan::math::sum(beta)) * cov_part));
        current_statement__ = 13;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(t)), m_t),
          "assigning variable log_lik", stan::model::index_uni((t - q)));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 1;
      eta = in__.read<local_scalar_t__>();
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable gamma");
      out__.write(gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(beta_tilde,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(q),
        "assigning variable beta_tilde");
      out__.write_free_simplex(beta_tilde);
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 4;
      tau = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, tau);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_tilde",
        "double", std::vector<size_t>{static_cast<size_t>(q)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 1;
      eta = context__.vals_r("eta")[(1 - 1)];
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 2;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_tilde_flat__;
        current_statement__ = 3;
        beta_tilde_flat__ = context__.vals_r("beta_tilde");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(beta_tilde, beta_tilde_flat__[(pos__ - 1)],
            "assigning variable beta_tilde", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(beta_tilde);
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 4;
      tau = context__.vals_r("tau")[(1 - 1)];
      out__.write_free_lub(0, 1, tau);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"eta", "gamma", "beta_tilde", "tau"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"beta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p)},
                std::vector<size_t>{static_cast<size_t>(q)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(q)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "eta");
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "eta");
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (q - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((q -1)) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + p) + q) + 1);
    const size_t num_transformed = emit_transformed_parameters * (q);
    const size_t num_gen_quantities = emit_generated_quantities *
      (log_lik_1dim__);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + p) + q) + 1);
    const size_t num_transformed = emit_transformed_parameters * (q);
    const size_t num_gen_quantities = emit_generated_quantities *
      (log_lik_1dim__);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_par_item_intercept_namespace::model_par_item_intercept;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_par_item_intercept_namespace::profiles__;
}
#endif
#endif
