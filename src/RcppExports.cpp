// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_fit_par_cpp
NumericVector get_fit_par_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_get_fit_par_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fit_par_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// loglik_par_cpp
double loglik_par_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_loglik_par_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_par_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc_par_cpp
List run_mcmc_par_cpp(const NumericVector& Y, const NumericMatrix& X, int q, int n_iter, Nullable<List> hyperparams, double proposal_sd, bool verbose);
RcppExport SEXP _pastasales_run_mcmc_par_cpp(SEXP YSEXP, SEXP XSEXP, SEXP qSEXP, SEXP n_iterSEXP, SEXP hyperparamsSEXP, SEXP proposal_sdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type hyperparams(hyperparamsSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_sd(proposal_sdSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_par_cpp(Y, X, q, n_iter, hyperparams, proposal_sd, verbose));
    return rcpp_result_gen;
END_RCPP
}
// get_fit_item_cpp
NumericVector get_fit_item_cpp(const NumericVector& Y, const NumericVector& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_get_fit_item_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fit_item_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// get_fit_pvar_cpp
NumericMatrix get_fit_pvar_cpp(const NumericMatrix& Y, const NumericMatrix& X, const NumericMatrix& Beta, const NumericMatrix& Gamma);
RcppExport SEXP _pastasales_get_fit_pvar_cpp(SEXP YSEXP, SEXP XSEXP, SEXP BetaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fit_pvar_cpp(Y, X, Beta, Gamma));
    return rcpp_result_gen;
END_RCPP
}
// loglik_item_cpp
double loglik_item_cpp(const NumericVector& Y, const NumericVector& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_loglik_item_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_item_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// loglik_pvar_cpp
double loglik_pvar_cpp(const NumericMatrix& Y, const NumericMatrix& X, const NumericMatrix& Beta, const NumericMatrix& Gamma);
RcppExport SEXP _pastasales_loglik_pvar_cpp(SEXP YSEXP, SEXP XSEXP, SEXP BetaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_pvar_cpp(Y, X, Beta, Gamma));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc_pvar_cpp
List run_mcmc_pvar_cpp(const NumericMatrix& Y, const NumericMatrix& X, const IntegerVector& G, int B, int q, int n_iter, Nullable<List> hyperparams, double proposal_sd, bool verbose);
RcppExport SEXP _pastasales_run_mcmc_pvar_cpp(SEXP YSEXP, SEXP XSEXP, SEXP GSEXP, SEXP BSEXP, SEXP qSEXP, SEXP n_iterSEXP, SEXP hyperparamsSEXP, SEXP proposal_sdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type hyperparams(hyperparamsSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_sd(proposal_sdSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_pvar_cpp(Y, X, G, B, q, n_iter, hyperparams, proposal_sd, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_vec_cpp
double dnorm_vec_cpp(NumericVector x, NumericVector mu, NumericVector sigsq, bool log);
RcppExport SEXP _pastasales_dnorm_vec_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigsqSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_vec_cpp(x, mu, sigsq, log));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet_cpp
NumericVector rdirichlet_cpp(NumericVector alpha_m);
RcppExport SEXP _pastasales_rdirichlet_cpp(SEXP alpha_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha_m(alpha_mSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet_cpp(alpha_m));
    return rcpp_result_gen;
END_RCPP
}
// ddirichlet_cpp
double ddirichlet_cpp(NumericVector x, NumericVector alpha, bool log);
RcppExport SEXP _pastasales_ddirichlet_cpp(SEXP xSEXP, SEXP alphaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(ddirichlet_cpp(x, alpha, log));
    return rcpp_result_gen;
END_RCPP
}
// get_mt_cpp
NumericVector get_mt_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_get_mt_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mt_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// get_mt_grad_cpp
NumericMatrix get_mt_grad_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_get_mt_grad_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mt_grad_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// loglik_cpp
double loglik_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_loglik_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// loglik_grad_cpp
NumericVector loglik_grad_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& beta, const NumericVector& gamma);
RcppExport SEXP _pastasales_loglik_grad_cpp(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_grad_cpp(Y, X, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// proj_beta_cpp
Rcpp::NumericVector proj_beta_cpp(Rcpp::NumericVector beta, double epsilon);
RcppExport SEXP _pastasales_proj_beta_cpp(SEXP betaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_beta_cpp(beta, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// bfgs_cpp
Rcpp::List bfgs_cpp(const Rcpp::NumericVector& Y, const Rcpp::NumericMatrix& X, Rcpp::NumericVector beta0, Rcpp::NumericVector gamma0, int maxIter, double tol, bool verbose);
RcppExport SEXP _pastasales_bfgs_cpp(SEXP YSEXP, SEXP XSEXP, SEXP beta0SEXP, SEXP gamma0SEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bfgs_cpp(Y, X, beta0, gamma0, maxIter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// bfgs_cpp2
Rcpp::List bfgs_cpp2(const Rcpp::NumericVector& Y, const Rcpp::NumericMatrix& X, Rcpp::NumericVector beta0, Rcpp::NumericVector gamma0, int maxIter, double tol, int verbose);
RcppExport SEXP _pastasales_bfgs_cpp2(SEXP YSEXP, SEXP XSEXP, SEXP beta0SEXP, SEXP gamma0SEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bfgs_cpp2(Y, X, beta0, gamma0, maxIter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// proj_grad_descent_cpp
Rcpp::List proj_grad_descent_cpp(const Rcpp::NumericVector& Y, const Rcpp::NumericMatrix& X, Rcpp::NumericVector beta0, Rcpp::NumericVector gamma0, double lr, int maxIter, double tol, bool return_allIters, bool verbose);
RcppExport SEXP _pastasales_proj_grad_descent_cpp(SEXP YSEXP, SEXP XSEXP, SEXP beta0SEXP, SEXP gamma0SEXP, SEXP lrSEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP return_allItersSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type return_allIters(return_allItersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_grad_descent_cpp(Y, X, beta0, gamma0, lr, maxIter, tol, return_allIters, verbose));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4par_item_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4par_item_intercept_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4vector_par_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_pastasales_get_fit_par_cpp", (DL_FUNC) &_pastasales_get_fit_par_cpp, 4},
    {"_pastasales_loglik_par_cpp", (DL_FUNC) &_pastasales_loglik_par_cpp, 4},
    {"_pastasales_run_mcmc_par_cpp", (DL_FUNC) &_pastasales_run_mcmc_par_cpp, 7},
    {"_pastasales_get_fit_item_cpp", (DL_FUNC) &_pastasales_get_fit_item_cpp, 4},
    {"_pastasales_get_fit_pvar_cpp", (DL_FUNC) &_pastasales_get_fit_pvar_cpp, 4},
    {"_pastasales_loglik_item_cpp", (DL_FUNC) &_pastasales_loglik_item_cpp, 4},
    {"_pastasales_loglik_pvar_cpp", (DL_FUNC) &_pastasales_loglik_pvar_cpp, 4},
    {"_pastasales_run_mcmc_pvar_cpp", (DL_FUNC) &_pastasales_run_mcmc_pvar_cpp, 9},
    {"_pastasales_dnorm_vec_cpp", (DL_FUNC) &_pastasales_dnorm_vec_cpp, 4},
    {"_pastasales_rdirichlet_cpp", (DL_FUNC) &_pastasales_rdirichlet_cpp, 1},
    {"_pastasales_ddirichlet_cpp", (DL_FUNC) &_pastasales_ddirichlet_cpp, 3},
    {"_pastasales_get_mt_cpp", (DL_FUNC) &_pastasales_get_mt_cpp, 4},
    {"_pastasales_get_mt_grad_cpp", (DL_FUNC) &_pastasales_get_mt_grad_cpp, 4},
    {"_pastasales_loglik_cpp", (DL_FUNC) &_pastasales_loglik_cpp, 4},
    {"_pastasales_loglik_grad_cpp", (DL_FUNC) &_pastasales_loglik_grad_cpp, 4},
    {"_pastasales_proj_beta_cpp", (DL_FUNC) &_pastasales_proj_beta_cpp, 2},
    {"_pastasales_bfgs_cpp", (DL_FUNC) &_pastasales_bfgs_cpp, 7},
    {"_pastasales_bfgs_cpp2", (DL_FUNC) &_pastasales_bfgs_cpp2, 7},
    {"_pastasales_proj_grad_descent_cpp", (DL_FUNC) &_pastasales_proj_grad_descent_cpp, 9},
    {"_rcpp_module_boot_stan_fit4par_item_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4par_item_mod, 0},
    {"_rcpp_module_boot_stan_fit4par_item_intercept_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4par_item_intercept_mod, 0},
    {"_rcpp_module_boot_stan_fit4vector_par_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4vector_par_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_pastasales(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
