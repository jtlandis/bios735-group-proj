// Generated by rstantools.  Do not edit by hand.

/*
    bios735-group-proj is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bios735-group-proj is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bios735-group-proj.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_vector_par_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 70> locations_array__ =
  {" (found before start of program)",
  " (in 'vector_par', line 18, column 2 to column 27)",
  " (in 'vector_par', line 19, column 2 to column 31)",
  " (in 'vector_par', line 20, column 2 to column 38)",
  " (in 'vector_par', line 21, column 2 to column 20)",
  " (in 'vector_par', line 23, column 2 to column 26)",
  " (in 'vector_par', line 24, column 2 to column 25)",
  " (in 'vector_par', line 25, column 2 to column 24)",
  " (in 'vector_par', line 26, column 2 to column 26)",
  " (in 'vector_par', line 28, column 2 to column 10)",
  " (in 'vector_par', line 29, column 2 to column 14)",
  " (in 'vector_par', line 32, column 2 to column 14)",
  " (in 'vector_par', line 63, column 2 to column 20)",
  " (in 'vector_par', line 34, column 11 to column 12)",
  " (in 'vector_par', line 34, column 4 to column 56)",
  " (in 'vector_par', line 35, column 4 to column 49)",
  " (in 'vector_par', line 36, column 4 to column 114)",
  " (in 'vector_par', line 37, column 4 to column 55)",
  " (in 'vector_par', line 38, column 4 to column 30)",
  " (in 'vector_par', line 33, column 17 to line 39, column 3)",
  " (in 'vector_par', line 33, column 2 to line 39, column 3)",
  " (in 'vector_par', line 65, column 4 to column 43)",
  " (in 'vector_par', line 64, column 17 to line 66, column 3)",
  " (in 'vector_par', line 64, column 2 to line 66, column 3)",
  " (in 'vector_par', line 43, column 2 to column 25)",
  " (in 'vector_par', line 44, column 2 to column 27)",
  " (in 'vector_par', line 47, column 4 to column 27)",
  " (in 'vector_par', line 48, column 4 to column 31)",
  " (in 'vector_par', line 46, column 17 to line 49, column 3)",
  " (in 'vector_par', line 46, column 2 to line 49, column 3)",
  " (in 'vector_par', line 52, column 4 to column 47)",
  " (in 'vector_par', line 53, column 4 to column 34)",
  " (in 'vector_par', line 54, column 4 to column 24)",
  " (in 'vector_par', line 55, column 4 to column 48)",
  " (in 'vector_par', line 51, column 17 to line 56, column 3)",
  " (in 'vector_par', line 51, column 2 to line 56, column 3)",
  " (in 'vector_par', line 58, column 2 to column 19)",
  " (in 'vector_par', line 60, column 2 to column 17)",
  " (in 'vector_par', line 3, column 2 to column 17)",
  " (in 'vector_par', line 4, column 2 to column 17)",
  " (in 'vector_par', line 5, column 2 to column 17)",
  " (in 'vector_par', line 6, column 2 to column 17)",
  " (in 'vector_par', line 7, column 2 to column 17)",
  " (in 'vector_par', line 8, column 2 to column 17)",
  " (in 'vector_par', line 9, column 8 to column 9)",
  " (in 'vector_par', line 9, column 2 to column 26)",
  " (in 'vector_par', line 10, column 8 to column 9)",
  " (in 'vector_par', line 10, column 2 to column 38)",
  " (in 'vector_par', line 11, column 8 to column 9)",
  " (in 'vector_par', line 11, column 2 to column 39)",
  " (in 'vector_par', line 12, column 9 to column 10)",
  " (in 'vector_par', line 12, column 12 to column 13)",
  " (in 'vector_par', line 12, column 2 to column 17)",
  " (in 'vector_par', line 13, column 9 to column 10)",
  " (in 'vector_par', line 13, column 12 to column 13)",
  " (in 'vector_par', line 13, column 2 to column 21)",
  " (in 'vector_par', line 14, column 8 to column 9)",
  " (in 'vector_par', line 14, column 2 to column 38)",
  " (in 'vector_par', line 18, column 8 to column 9)",
  " (in 'vector_par', line 18, column 18 to column 19)",
  " (in 'vector_par', line 19, column 8 to column 9)",
  " (in 'vector_par', line 19, column 19 to column 20)",
  " (in 'vector_par', line 20, column 8 to column 9)",
  " (in 'vector_par', line 21, column 8 to column 9)",
  " (in 'vector_par', line 23, column 8 to column 9)",
  " (in 'vector_par', line 23, column 18 to column 19)",
  " (in 'vector_par', line 24, column 8 to column 9)",
  " (in 'vector_par', line 29, column 9 to column 10)",
  " (in 'vector_par', line 32, column 9 to column 10)",
  " (in 'vector_par', line 63, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_vector_par final : public model_base_crtp<model_vector_par> {
private:
  int N;
  int I;
  int B;
  int Q;
  int P;
  int T;
  std::vector<int> y;
  std::vector<int> item;
  std::vector<int> brand;
  Eigen::Matrix<double,-1,-1> x_data__;
  Eigen::Matrix<double,-1,-1> lag_y_data__;
  std::vector<int> time;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> lag_y{nullptr, 0, 0};
public:
  ~model_vector_par() {}
  model_vector_par(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_vector_par_namespace::model_vector_par";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 38;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 38;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 39;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "B", "int",
        std::vector<size_t>{});
      B = std::numeric_limits<int>::min();
      current_statement__ = 40;
      B = context__.vals_i("B")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "B", B, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "Q", "int",
        std::vector<size_t>{});
      Q = std::numeric_limits<int>::min();
      current_statement__ = 41;
      Q = context__.vals_i("Q")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "Q", Q, 1);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 42;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "P", P, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 43;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 45;
      y = context__.vals_i("y");
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("item", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "item", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      item = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 47;
      item = context__.vals_i("item");
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "item", item, 1);
      current_statement__ = 47;
      stan::math::check_less_or_equal(function__, "item", item, I);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("brand", "I", I);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "brand", "int",
        std::vector<size_t>{static_cast<size_t>(I)});
      brand = std::vector<int>(I, std::numeric_limits<int>::min());
      current_statement__ = 49;
      brand = context__.vals_i("brand");
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "brand", brand, 1);
      current_statement__ = 49;
      stan::math::check_less_or_equal(function__, "brand", brand, B);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("x", "P", P);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(P)});
      x_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_data__.data(), N, P);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 52;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 52;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 52;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("lag_y", "N", N);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("lag_y", "Q", Q);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "lag_y", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(Q)});
      lag_y_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Q,
                       std::numeric_limits<double>::quiet_NaN());
      new (&lag_y)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(lag_y_data__.data(), N, Q);
      {
        std::vector<local_scalar_t__> lag_y_flat__;
        current_statement__ = 55;
        lag_y_flat__ = context__.vals_r("lag_y");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(lag_y, lag_y_flat__[(pos__ - 1)],
              "assigning variable lag_y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("time", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "time", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      time = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 57;
      time = context__.vals_i("time");
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "time", time, 1);
      current_statement__ = 57;
      stan::math::check_less_or_equal(function__, "time", time, T);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("gamma", "I", I);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("gamma", "P", P);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("beta_raw", "I", I);
      current_statement__ = 61;
      stan::math::validate_positive_index("beta_raw", "Q", Q);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("tau", "I", I);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("eta", "I", I);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("mu_g", "B", B);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("mu_g", "P", P);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("mu_brand", "B", B);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("f", "T", T);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("m", "N", N);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (I * P) + (I * (Q - 1)) + I + I + (B * P) + B + 1 + 1 +
      1 + T;
  }
  inline std::string model_name() const final {
    return "model_vector_par";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_vector_par_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> gamma =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(I,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__));
      current_statement__ = 1;
      gamma = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(I, P);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(I,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__));
      current_statement__ = 2;
      beta_raw = in__.template read_constrain_simplex<
                   std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                   jacobian__>(lp__, I, Q);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 3;
      tau = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, 1, lp__, I);
      std::vector<local_scalar_t__> eta =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 4;
      eta = in__.template read<std::vector<local_scalar_t__>>(I);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mu_g =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(B,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__));
      current_statement__ = 5;
      mu_g = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(B, P);
      std::vector<local_scalar_t__> mu_brand =
        std::vector<local_scalar_t__>(B, DUMMY_VAR__);
      current_statement__ = 6;
      mu_brand = in__.template read<std::vector<local_scalar_t__>>(B);
      local_scalar_t__ sigma_g = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_g = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_eta = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_eta = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 9;
      mu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 10;
      f = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      Eigen::Matrix<local_scalar_t__,-1,1> m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 20;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 13;
        stan::math::validate_non_negative_index("beta_i", "Q", Q);
        Eigen::Matrix<local_scalar_t__,-1,1> beta_i =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__);
        current_statement__ = 14;
        stan::model::assign(beta_i,
          stan::math::multiply(
            stan::model::rvalue(tau, "tau",
              stan::model::index_uni(
                stan::model::rvalue(item, "item", stan::model::index_uni(n)))),
            stan::model::rvalue(beta_raw, "beta_raw",
              stan::model::index_uni(
                stan::model::rvalue(item, "item", stan::model::index_uni(n))))),
          "assigning variable beta_i");
        local_scalar_t__ ar_part = DUMMY_VAR__;
        current_statement__ = 15;
        ar_part = stan::math::dot_product(beta_i,
                    stan::model::rvalue(lag_y, "lag_y",
                      stan::model::index_uni(n)));
        local_scalar_t__ lin_pred = DUMMY_VAR__;
        current_statement__ = 16;
        lin_pred = ((((mu +
          stan::model::rvalue(mu_brand, "mu_brand",
            stan::model::index_uni(
              stan::model::rvalue(brand, "brand",
                stan::model::index_uni(
                  stan::model::rvalue(item, "item", stan::model::index_uni(n)))))))
          +
          stan::model::rvalue(eta, "eta",
            stan::model::index_uni(
              stan::model::rvalue(item, "item", stan::model::index_uni(n)))))
          +
          stan::model::rvalue(f, "f",
            stan::model::index_uni(
              stan::model::rvalue(time, "time", stan::model::index_uni(n)))))
          +
          stan::math::dot_product(
            stan::model::rvalue(gamma, "gamma",
              stan::model::index_uni(
                stan::model::rvalue(item, "item", stan::model::index_uni(n)))),
            stan::model::rvalue(x, "x", stan::model::index_uni(n))));
        local_scalar_t__ cov_part = DUMMY_VAR__;
        current_statement__ = 17;
        cov_part = ((1 -
          stan::model::rvalue(tau, "tau",
            stan::model::index_uni(
              stan::model::rvalue(item, "item", stan::model::index_uni(n)))))
          * stan::math::exp(lin_pred));
        current_statement__ = 18;
        stan::model::assign(m, (ar_part + cov_part), "assigning variable m",
          stan::model::index_uni(n));
      }
      {
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_g, 0, 1));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_eta, 0, 1));
        current_statement__ = 29;
        for (int b = 1; b <= B; ++b) {
          current_statement__ = 26;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(mu_g, "mu_g",
                             stan::model::index_uni(b)), 0, 1));
          current_statement__ = 27;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(mu_brand, "mu_brand",
                             stan::model::index_uni(b)), 0, 1));
        }
        current_statement__ = 35;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 30;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(gamma, "gamma",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(mu_g, "mu_g",
                             stan::model::index_uni(
                               stan::model::rvalue(brand, "brand",
                                 stan::model::index_uni(i)))), sigma_g));
          current_statement__ = 31;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(eta, "eta",
                             stan::model::index_uni(i)), 0, sigma_eta));
          current_statement__ = 32;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(
                           stan::model::rvalue(tau, "tau",
                             stan::model::index_uni(i)), 2, 2));
          current_statement__ = 33;
          lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                           stan::model::rvalue(beta_raw, "beta_raw",
                             stan::model::index_uni(i)),
                           stan::math::rep_vector(1.0, Q)));
        }
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(f, 0, 1));
        current_statement__ = 37;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(y, m));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_vector_par_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> gamma =
        std::vector<Eigen::Matrix<double,-1,1>>(I,
          Eigen::Matrix<double,-1,1>::Constant(P,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      gamma = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(I, P);
      std::vector<Eigen::Matrix<double,-1,1>> beta_raw =
        std::vector<Eigen::Matrix<double,-1,1>>(I,
          Eigen::Matrix<double,-1,1>::Constant(Q,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      beta_raw = in__.template read_constrain_simplex<
                   std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                   jacobian__>(lp__, I, Q);
      std::vector<double> tau =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tau = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, 1, lp__, I);
      std::vector<double> eta =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      eta = in__.template read<std::vector<local_scalar_t__>>(I);
      std::vector<Eigen::Matrix<double,-1,1>> mu_g =
        std::vector<Eigen::Matrix<double,-1,1>>(B,
          Eigen::Matrix<double,-1,1>::Constant(P,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      mu_g = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(B, P);
      std::vector<double> mu_brand =
        std::vector<double>(B, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      mu_brand = in__.template read<std::vector<local_scalar_t__>>(B);
      double sigma_g = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma_g = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double sigma_eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sigma_eta = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      mu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> f =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      f = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      Eigen::Matrix<double,-1,1> m =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          out__.write(gamma[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          out__.write(beta_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(tau);
      out__.write(eta);
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= B; ++sym2__) {
          out__.write(mu_g[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(mu_brand);
      out__.write(sigma_g);
      out__.write(sigma_eta);
      out__.write(mu);
      out__.write(f);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 20;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 13;
        stan::math::validate_non_negative_index("beta_i", "Q", Q);
        Eigen::Matrix<double,-1,1> beta_i =
          Eigen::Matrix<double,-1,1>::Constant(Q,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 14;
        stan::model::assign(beta_i,
          stan::math::multiply(
            stan::model::rvalue(tau, "tau",
              stan::model::index_uni(
                stan::model::rvalue(item, "item", stan::model::index_uni(n)))),
            stan::model::rvalue(beta_raw, "beta_raw",
              stan::model::index_uni(
                stan::model::rvalue(item, "item", stan::model::index_uni(n))))),
          "assigning variable beta_i");
        double ar_part = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 15;
        ar_part = stan::math::dot_product(beta_i,
                    stan::model::rvalue(lag_y, "lag_y",
                      stan::model::index_uni(n)));
        double lin_pred = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 16;
        lin_pred = ((((mu +
          stan::model::rvalue(mu_brand, "mu_brand",
            stan::model::index_uni(
              stan::model::rvalue(brand, "brand",
                stan::model::index_uni(
                  stan::model::rvalue(item, "item", stan::model::index_uni(n)))))))
          +
          stan::model::rvalue(eta, "eta",
            stan::model::index_uni(
              stan::model::rvalue(item, "item", stan::model::index_uni(n)))))
          +
          stan::model::rvalue(f, "f",
            stan::model::index_uni(
              stan::model::rvalue(time, "time", stan::model::index_uni(n)))))
          +
          stan::math::dot_product(
            stan::model::rvalue(gamma, "gamma",
              stan::model::index_uni(
                stan::model::rvalue(item, "item", stan::model::index_uni(n)))),
            stan::model::rvalue(x, "x", stan::model::index_uni(n))));
        double cov_part = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 17;
        cov_part = ((1 -
          stan::model::rvalue(tau, "tau",
            stan::model::index_uni(
              stan::model::rvalue(item, "item", stan::model::index_uni(n)))))
          * stan::math::exp(lin_pred));
        current_statement__ = 18;
        stan::model::assign(m, (ar_part + cov_part), "assigning variable m",
          stan::model::index_uni(n));
      }
      if (emit_transformed_parameters__) {
        out__.write(m);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 21;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(n)),
            stan::model::rvalue(m, "m", stan::model::index_uni(n))),
          "assigning variable log_lik", stan::model::index_uni(n));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> gamma =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(I,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(gamma, in__.read<local_scalar_t__>(),
            "assigning variable gamma", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(gamma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(I,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          current_statement__ = 2;
          stan::model::assign(beta_raw, in__.read<local_scalar_t__>(),
            "assigning variable beta_raw", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(beta_raw);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(tau, in__.read<std::vector<local_scalar_t__>>(I),
        "assigning variable tau");
      out__.write_free_lub(0, 1, tau);
      std::vector<local_scalar_t__> eta =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(eta, in__.read<std::vector<local_scalar_t__>>(I),
        "assigning variable eta");
      out__.write(eta);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mu_g =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(B,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= B; ++sym2__) {
          current_statement__ = 5;
          stan::model::assign(mu_g, in__.read<local_scalar_t__>(),
            "assigning variable mu_g", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(mu_g);
      std::vector<local_scalar_t__> mu_brand =
        std::vector<local_scalar_t__>(B, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(mu_brand,
        in__.read<std::vector<local_scalar_t__>>(B),
        "assigning variable mu_brand");
      out__.write(mu_brand);
      local_scalar_t__ sigma_g = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_g = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_g);
      local_scalar_t__ sigma_eta = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_eta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_eta);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 9;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(f,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(T),
        "assigning variable f");
      out__.write(f);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(P)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(Q)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_g", "double",
        std::vector<size_t>{static_cast<size_t>(B), static_cast<size_t>(P)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "mu_brand",
        "double", std::vector<size_t>{static_cast<size_t>(B)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma_g",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma_eta",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "f", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> gamma =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(I,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 1;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
              "assigning variable gamma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(gamma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(I,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_raw_flat__;
        current_statement__ = 2;
        beta_raw_flat__ = context__.vals_r("beta_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(beta_raw, beta_raw_flat__[(pos__ - 1)],
              "assigning variable beta_raw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(beta_raw);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 3;
      tau = context__.vals_r("tau");
      out__.write_free_lub(0, 1, tau);
      std::vector<local_scalar_t__> eta =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 4;
      eta = context__.vals_r("eta");
      out__.write(eta);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mu_g =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(B,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> mu_g_flat__;
        current_statement__ = 5;
        mu_g_flat__ = context__.vals_r("mu_g");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= B; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(mu_g, mu_g_flat__[(pos__ - 1)],
              "assigning variable mu_g", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(mu_g);
      std::vector<local_scalar_t__> mu_brand =
        std::vector<local_scalar_t__>(B, DUMMY_VAR__);
      current_statement__ = 6;
      mu_brand = context__.vals_r("mu_brand");
      out__.write(mu_brand);
      local_scalar_t__ sigma_g = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_g = context__.vals_r("sigma_g")[(1 - 1)];
      out__.write_free_lb(0, sigma_g);
      local_scalar_t__ sigma_eta = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_eta = context__.vals_r("sigma_eta")[(1 - 1)];
      out__.write_free_lb(0, sigma_eta);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 9;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> f_flat__;
        current_statement__ = 10;
        f_flat__ = context__.vals_r("f");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(f, f_flat__[(pos__ - 1)],
            "assigning variable f", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(f);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"gamma", "beta_raw", "tau", "eta",
                "mu_g", "mu_brand", "sigma_g", "sigma_eta", "mu", "f"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"m"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(I),
                                                 static_cast<size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(I),
                  static_cast<size_t>(Q)},
                std::vector<size_t>{static_cast<size_t>(I)},
                std::vector<size_t>{static_cast<size_t>(I)},
                std::vector<size_t>{static_cast<size_t>(B),
                  static_cast<size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(B)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(T)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
        param_names__.emplace_back(std::string() + "gamma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= B; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu_g" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_brand" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_g");
    param_names__.emplace_back(std::string() + "sigma_eta");
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "f" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "m" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
        param_names__.emplace_back(std::string() + "gamma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= (Q - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= B; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu_g" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_brand" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_g");
    param_names__.emplace_back(std::string() + "sigma_eta");
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "f" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "m" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "}},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(Q) + "}},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_g\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "}},\"block\":\"parameters\"},{\"name\":\"mu_brand\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "}},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((Q -1)) + "}},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_g\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "}},\"block\":\"parameters\"},{\"name\":\"mu_brand\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((I * P) + (I * Q)) + I) + I) + (B *
      P)) + B) + 1) + 1) + 1) + T);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((I * P) + (I * Q)) + I) + I) + (B *
      P)) + B) + 1) + 1) + 1) + T);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_vector_par_namespace::model_vector_par;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_vector_par_namespace::profiles__;
}
#endif
#endif
